import{_ as s,o as n,c as a,Q as o}from"./chunks/framework.82820f36.js";const u=JSON.parse('{"title":"node 相关","description":"","frontmatter":{},"headers":[],"relativePath":"study/node.md","filePath":"study/node.md","lastUpdated":1722869359000}'),p={name:"study/node.md"},l=o(`<h1 id="node-相关" tabindex="-1">node 相关 <a class="header-anchor" href="#node-相关" aria-label="Permalink to &quot;node 相关&quot;">​</a></h1><h2 id="process-nexttick" tabindex="-1">process.nextTick <a class="header-anchor" href="#process-nexttick" aria-label="Permalink to &quot;process.nextTick&quot;">​</a></h2><h3 id="process-nexttick-的执行时机" tabindex="-1">process.nextTick 的执行时机 <a class="header-anchor" href="#process-nexttick-的执行时机" aria-label="Permalink to &quot;process.nextTick 的执行时机&quot;">​</a></h3><h4 id="在-node-中-process-nexttick-的执行时机是在当前事件循环的末尾、下一个事件循环开始之前。" tabindex="-1">在 Node 中 process.nextTick 的执行时机是在当前事件循环的末尾、下一个事件循环开始之前。 <a class="header-anchor" href="#在-node-中-process-nexttick-的执行时机是在当前事件循环的末尾、下一个事件循环开始之前。" aria-label="Permalink to &quot;在 Node 中 process.nextTick 的执行时机是在当前事件循环的末尾、下一个事件循环开始之前。&quot;">​</a></h4><p>nextTick 是一个用于异步操作的函数，用来在当前执行栈执行完毕后，在下一个事件循环中执行指定的回调函数。它通常用于在本轮事件循环结束前执行一些需要延迟执行的代码。</p><p>具体来说，nextTick 将指定的回调函数放入微任务队列中，确保在下一个事件循环中立即执行。这使得回调函数能够在当前执行栈的任务全部完成后被调用，避免了阻塞或延迟其他任务。</p><h2 id="微任务和宏任务-promise-里面-settimeout-然后-resolve-哪个执行快" tabindex="-1">微任务和宏任务，promise 里面 setTImeout 然后 resolve，哪个执行快？ <a class="header-anchor" href="#微任务和宏任务-promise-里面-settimeout-然后-resolve-哪个执行快" aria-label="Permalink to &quot;微任务和宏任务，promise 里面 setTImeout 然后 resolve，哪个执行快？&quot;">​</a></h2><p>没听清具体什么情况，但是应该回答错了</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">a</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">new</span><span style="color:#DBD7CAEE;"> </span><span style="color:#B8A965;">Promise</span><span style="color:#666666;">((</span><span style="color:#BD976A;">resolve</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#80A665;">setTimeout</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">      </span><span style="color:#80A665;">resolve</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">2</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">      </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">222222</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#666666;">});</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">});</span></span>
<span class="line"><span style="color:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">init</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">async</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4D9375;">await</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">a</span><span style="color:#666666;">());</span></span>
<span class="line"><span style="color:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">init</span><span style="color:#666666;">();</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#59873A;">a</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#998418;">Promise</span><span style="color:#999999;">((</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#2F798A;">2</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">222222</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">});</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">});</span></span>
<span class="line"><span style="color:#999999;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#59873A;">init</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">async</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#1E754F;">await</span><span style="color:#393A34;"> </span><span style="color:#59873A;">a</span><span style="color:#999999;">());</span></span>
<span class="line"><span style="color:#999999;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">init</span><span style="color:#999999;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>应该是这种情况 222222 会先输出</p><h2 id="如果从零到一搭建一个项目-你会怎么考虑" tabindex="-1">如果从零到一搭建一个项目，你会怎么考虑？ <a class="header-anchor" href="#如果从零到一搭建一个项目-你会怎么考虑" aria-label="Permalink to &quot;如果从零到一搭建一个项目，你会怎么考虑？&quot;">​</a></h2><p>问到好多都是这个，需要组织一下语言</p><h2 id="node-里面-import-和-require-的区别-可以混用吗" tabindex="-1">node 里面 import 和 require 的区别，可以混用吗？ <a class="header-anchor" href="#node-里面-import-和-require-的区别-可以混用吗" aria-label="Permalink to &quot;node 里面 import 和 require 的区别，可以混用吗？&quot;">​</a></h2><p>在 Node.js 中，import 和 require 是两种不同的模块加载方式，具有一些区别：</p><p>语法和用法区别:</p><p>require 是 CommonJS 规范中定义的模块加载方法，用于在运行时动态地加载模块。 import 是 ECMAScript 模块（ESM）的标准语法，用于静态加载模块，在编译时就确定加载依赖关系。 兼容性:</p><p>require 是 Node.js 原生支持的模块加载方法，可以加载 CommonJS 模块和部分 ECMAScript 模块。 import 是 ECMAScript 6 引入的语法，需要在支持 ESM 的环境下使用，Node.js 从版本 12 开始支持部分 import 语法，但需要在文件扩展名为 .mjs 或设置 &quot;type&quot;: &quot;module&quot; 的 package.json 中启用 ESM 模式。 混用情况:</p><p>在 Node.js 中，默认情况下不能直接混用 import 和 require，因为它们代表了不同的模块系统。如果你在同一个文件中同时使用 import 和 require，Node.js 在编译时会报错。 转换和兼容处理:</p><p>如果你希望在 Node.js 中同时使用 import 和 require，可以通过一些工具或库来实现转换，例如 Babel、Webpack 等，它们可以将 ESM 转换为 CommonJS 或者在 Node.js 中启用 ESM 支持来允许混用。 总结来说，import 和 require 在语法和用法上有明显的区别，不能直接混用。如果需要在 Node.js 中使用 import，需要确保 Node.js 版本支持，并且文件使用 .mjs 扩展名或者设置了相应的 package.json 配置。</p><h2 id="同级域名登录怎么实现" tabindex="-1">同级域名登录怎么实现 <a class="header-anchor" href="#同级域名登录怎么实现" aria-label="Permalink to &quot;同级域名登录怎么实现&quot;">​</a></h2><p>cookie</p><h2 id="node-相关项目经验积累" tabindex="-1">node 相关项目经验积累 <a class="header-anchor" href="#node-相关项目经验积累" aria-label="Permalink to &quot;node 相关项目经验积累&quot;">​</a></h2><p>好像很多都要node项目，需要更新简历，写三个项目进去</p>`,23),e=[l];function r(t,c,i,y,d,A){return n(),a("div",null,e)}const E=s(p,[["render",r]]);export{u as __pageData,E as default};
